name: Test
on:
  push:
    branches:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  HOMEBREW_NO_INSTALL_UPGRADE: 1
  HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  HOMEBREW_NO_AUTO_UPDATE: 1

jobs:
  test:
    runs-on: docker
    name: "Tests"
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        name: Checkout
      - uses: PurpleBooth/common-pipelines/actions/install-specdown@main
        name: Install specdown
      - uses: PurpleBooth/common-pipelines/actions/install-rust@main
        name: Install rust
        secrets:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      - uses: PurpleBooth/common-pipelines/actions/install-just@main
        name: Install just
      - run: just build
      - run: just lint
      - run: just test
      - run: |
          sudo apt-get update
          sudo apt-get install -y socat
        name: apt-get install -y socat
      - run: just specdown


  release:
    if: github.ref == 'refs/heads/main'
    needs:
      - test
    outputs:
      current_version: ${{ steps.current_version.outputs.current_version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    runs-on: docker
    steps:
      - uses: actions/checkout@main
        with:
          token: ${{ secrets.FJ_TOKEN }}
          fetch-depth: 0
      - uses: PurpleBooth/common-pipelines/actions/install-rust@main
        name: Install rust
        secrets:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      - name: Get tags
        run: git fetch --tags origin
      - shell: bash
        secrets:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: GITHUB_TOKEN="$GH_TOKEN" cargo binstall --no-confirm cargo-edit
      - shell: bash
        run: GITHUB_TOKEN="$GH_TOKEN" cargo binstall --no-confirm --locked cocogitto
      - id: previous_version
        run: |
          cog get-version | tee .version
          echo "previous_version=$( cat .version )"  >> "$GITHUB_OUTPUT"
          rm .version
        shell: bash
      - name: Semver release
        id: release
        run: |
          git config --global user.name "cog-bot"
          git config --global user.email "cog@example.com"
          cog bump --auto
      - id: current_version
        run: |
          cog get-version | tee .version
          echo "current_version=$( cat .version )"  >> "$GITHUB_OUTPUT"
          rm .version
        shell: bash

  bake-release-build:
    if: jobs.release.outputs.current_version != jobs.release.outputs.previous_version
    needs:
      - release
    runs-on: self-hosted
    steps:
      - name: Checkout
        if: ${{ inputs.current_version != '' }}
        uses: actions/checkout
        with:
          token: ${{ secrets.FJ_TOKEN }}
          lfs: true
          ref: v${{ inputs.current_version }}
          submodules: recursive
      - name: Checkout
        if: ${{ inputs.current_version == '' }}
        uses: actions/checkout
        with:
          lfs: true
          submodules: recursive
      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action
      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: codeberg.org
          username: ${{ github.actor }}
          password: ${{ secrets.FJ_TOKEN }}
      - run: echo "repository=$( echo "codeberg.org/$REPOSITORY" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
        id: docker
        name: Turn repository name into docker registry name
        env:
          REPOSITORY: ${{ github.repository }}
      - name: Extract versioned metadata (tags, labels) for Docker
        if: inputs.current_version != ''
        id: meta-with-version
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          bake-target: docker
          images: ${{ steps.docker.outputs.repository }}
          tags: |
            type=edge,branch=main
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=latest
            type=semver,pattern={{version}},value=v${{ inputs.current_version }},prefix=v
            type=semver,pattern={{version}},value=v${{ inputs.current_version }}
            type=sha
      - name: Bake Docker (with version)
        if: inputs.current_version != ''
        uses: docker/bake-action@2e3d19baedb14545e5d41222653874f25d5b4dfb # v5
        with:
          set: |
            docker.cache-from=type=gha
            docker.cache-to=type=gha,mode=max
            docker.args.VER=${{ inputs.current_version }}
          push: true
          files: |
            ./docker-bake.hcl
            ${{ steps.meta-with-version.outputs.bake-file-tags }}
            ${{ steps.meta-with-version.outputs.bake-file-annotations }}
            ${{ steps.meta-with-version.outputs.bake-file-labels }}
          targets: docker
      - name: Bake Bins (with version)
        if: inputs.current_version != ''
        uses: docker/bake-action@2e3d19baedb14545e5d41222653874f25d5b4dfb # v5
        env:
          GPG_PRIVATE_KEY: ${{ secrets.gpg_private_key }}
          GPG_PASSPHRASE: ${{ secrets.gpg_passphrase }}
        with:
          set: |
            bins*.args.VER=${{ inputs.current_version }}
          push: true
          files: |
            ./docker-bake.hcl
            ${{ steps.meta-with-version.outputs.bake-file-tags }}
            ${{ steps.meta-with-version.outputs.bake-file-annotations }}
            ${{ steps.meta-with-version.outputs.bake-file-labels }}
          targets: bins
      - shell: bash
        name: "Flatten filenames"
        run: |
          for I in target/bins/*/*/* ; do
            mv -v "$I" "target/bins/$(echo "$I" | cut -d '/' -f 3- | tr "/" "-")"
          done
          find target/bins/ -type d -empty -delete
      - uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        name: Upload binaries
        with:
          name: built-bins
          path: target/bins/
